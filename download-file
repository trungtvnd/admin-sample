
    private final MinioClient minioClient;

    public FileDownloadController(MinioClient minioClient) {
        this.minioClient = minioClient;
    }

    @GetMapping("/files")
    public ResponseEntity<FileSystemResource> downloadFiles(@RequestParam List<String> fileNames) throws IOException {
        // Create a temporary file to store the ZIP content
        File zipFile = File.createTempFile("files", ".zip");

        try (ZipOutputStream zipOutputStream = new ZipOutputStream(Files.newOutputStream(zipFile.toPath()))) {
            for (String fileName : fileNames) {
                // Add each file to the zip entry
                zipOutputStream.putNextEntry(new ZipEntry(fileName));

                // Read the content of the file from MinIO server
                try (InputStream inputStream = minioClient.getObject("your-bucket-name", fileName)) {
                    byte[] buffer = new byte[1024];
                    int length;
                    while ((length = inputStream.read(buffer)) > 0) {
                        zipOutputStream.write(buffer, 0, length);
                    }
                }

                zipOutputStream.closeEntry();
            }
        }

        // Prepare the response
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=files.zip");
        headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);
        headers.add(HttpHeaders.CACHE_CONTROL, "no-cache, no-store, must-revalidate");
        headers.add(HttpHeaders.PRAGMA, "no-cache");
        headers.add(HttpHeaders.EXPIRES, "0");

        FileSystemResource resource = new FileSystemResource(zipFile);

        return ResponseEntity.ok()
                .headers(headers)
                .contentLength(zipFile.length())
                .body(resource);
    }





import io.minio.MinioClient;
import io.minio.errors.MinioException;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

@RestController
@RequestMapping("/download")
public class FileDownloadController {

    private final MinioClient minioClient;

    public FileDownloadController(MinioClient minioClient) {
        this.minioClient = minioClient;
    }

    @GetMapping("/files")
    public ResponseEntity<FileSystemResource> downloadFiles(@RequestParam List<String> fileNames) throws IOException {
        // Create a temporary folder to store the files
        File tempFolder = Files.createTempDirectory("files").toFile();

        try {
            for (String fileName : fileNames) {
                // Create folder structure if needed
                String[] parts = fileName.split("/");
                String entryFileName = parts[parts.length - 1];
                Path filePath = tempFolder.toPath().resolve(fileName);

                // Read the content of the file from MinIO server
                try (InputStream inputStream = minioClient.getObject("your-bucket-name", fileName)) {
                    Files.createDirectories(filePath.getParent());
                    Files.copy(inputStream, filePath, StandardCopyOption.REPLACE_EXISTING);
                }
            }

            // Create a temporary file to store the ZIP content
            File zipFile = File.createTempFile("files", ".zip");

            // Zip the entire folder
            zipFolder(tempFolder.toPath(), zipFile.toPath());

            // Prepare the response
            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=files.zip");
            headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);
            headers.add(HttpHeaders.CACHE_CONTROL, "no-cache, no-store, must-revalidate");
            headers.add(HttpHeaders.PRAGMA, "no-cache");
            headers.add(HttpHeaders.EXPIRES, "0");

            FileSystemResource resource = new FileSystemResource(zipFile);

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(zipFile.length())
                    .body(resource);
        } finally {
            // Delete the temporary folder and its contents
            deleteDirectory(tempFolder);
        }
    }

    private void zipFolder(Path sourceFolder, Path destinationZipFile) throws IOException {
        try (ZipOutputStream zipOutputStream = new ZipOutputStream(Files.newOutputStream(destinationZipFile))) {
            Files.walk(sourceFolder)
                    .filter(path -> !Files.isDirectory(path))
                    .forEach(path -> {
                        ZipEntry zipEntry = new ZipEntry(sourceFolder.relativize(path).toString());
                        try {
                            zipOutputStream.putNextEntry(zipEntry);
                            Files.copy(path, zipOutputStream);
                            zipOutputStream.closeEntry();
                        } catch (IOException e) {
                            e.printStackTrace(); // Handle the exception according to your needs
                        }
                    });
        }
    }


            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
            response.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);
            response.setHeader(HttpHeaders.CACHE_CONTROL, "no-cache, no-store, must-revalidate");
            response.setHeader(HttpHeaders.PRAGMA, "no-cache");
            response.setHeader(HttpHeaders.EXPIRES, "0");
